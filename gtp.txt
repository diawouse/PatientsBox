peux tu ameliorer le code java ci-dessous en tenant compte des messages : 
en tenant compte du message ci-dessou :
Refactor this method to reduce its Cognitive Complexity from 20 to the 15 allowed.

	public static Dataset<Row> processData(Map<String, Dataset<Row>> mapInputDatasets) throws Exception {
		LOGGER.info("Start processData");
		List<HashMap<String, String>> listAno = new ArrayList<>();

		Dataset<Row> eaicEvtDs = Utils.loadMaxParamAndFilterFlAct(
				mapInputDatasets.get(UsageRSRG.CATALOG_RSRG.J6_TR_EAI_CDC_EVT_TABLE_NAME),
				UsageRSRG.FIELD_LIST_KEYS_EVT,
				UsageRSRG.J6_TR_EAI_CDC_EVT.DT_MAJ_PAR,true);

		Dataset<Row> vadZoDs = mapInputDatasets.get(UsageEAIC.CATALOG_EAIC.J6_TA_EAI_CDC_VAD_TABLE_NAME);
		Dataset<Row> j6TsEaic = mapInputDatasets.get(UsageEAIC.CATALOG_EAIC.J6_TS_EAI_CDC_TABLE_NAME);

		Timestamp lastStep2ExecutionDate = TrackingUtils.getDateLastExecProcess(j6TsEaic, GeneralConstants.PROCESS_NUMBER.J6_TA_EAI_CDC_VAD);

		Dataset<Row> vadZbDs = Utils.filterDataSourceForUsage(mapInputDatasets.get(SourceRSRG.CATALOG_RSRG.DD_TA_EAI_CDC_VAD_TABLE_NAME),lastStep2ExecutionDate);
		vadZbDs = Utils.loadLastMaxVersion(vadZbDs, UsageEAIC.J6_TA_EAI_CDC_VAD.KEYS_VAD, UsageEAIC.J6_TA_EAI_CDC_VAD.ING_TMS_INGESTION);

		TrackingUtils.writeTrackInfo(vadZbDs, GeneralConstants.EVT_NUMBER.LECTURE, UsageEAIC.CATALOG_EAIC.J6_TA_EAI_CDC_VAD_TABLE_NAME, GeneralConstants.PROCESS_NUMBER.J6_TA_EAI_CDC_VAD);

		if (Utils.isDatasetEmpty(vadZbDs)) {
			LOGGER.error("La table source " + SourceRSRG.CATALOG_RSRG.DD_TA_EAI_CDC_VAD_TABLE_NAME + " est vide.");
			HashMap<String, String> mapAno = new HashMap<>();
			mapAno.put(Tracking.LL_ANO, Utils.getDescAno(eaicEvtDs, VAD_01));
			mapAno.put(Tracking.CD_ANO, VAD_01);
			Tracking.trackInfo(GeneralConstants.PROCESS_NUMBER.J6_TA_EAI_CDC_VAD, GeneralConstants.EVT_NUMBER.CONTROLE, mapAno);
			return null;
		}

		if (vadZbDs.filter(not(col(UsageEAIC.J6_TA_EAI_CDC_VAD.CD_VAD).isin("OK", "KO"))).limit(1).count() != 0) {
			HashMap<String, String> mapAno = new HashMap<>();
			mapAno.put(Tracking.LL_ANO, Utils.getDescAno(eaicEvtDs, VAD_02));
			mapAno.put(Tracking.CD_ANO, VAD_02);
			listAno.add(mapAno);
		}

		if (vadZbDs.filter(col(UsageEAIC.J6_TA_EAI_CDC_VAD.NO_VER_PAR).equalTo(EMPTY_STRING).or(col(UsageEAIC.J6_TA_EAI_CDC_VAD.NO_VER_PAR).isNull())).limit(1).count() != 0) {
			HashMap<String, String> mapAno = new HashMap<>();
			mapAno.put(Tracking.LL_ANO, Utils.getDescAno(eaicEvtDs, VAD_03));
			mapAno.put(Tracking.CD_ANO, VAD_03);
			listAno.add(mapAno);
		}

		if (vadZbDs.filter(col(UsageEAIC.J6_TA_EAI_CDC_VAD.DT_MAJ_PAR).equalTo(EMPTY_STRING).or(col(UsageEAIC.J6_TA_EAI_CDC_VAD.DT_MAJ_PAR).isNull())).limit(1).count() != 0) {
			HashMap<String, String> mapAno = new HashMap<>();
			mapAno.put(Tracking.LL_ANO, Utils.getDescAno(eaicEvtDs, VAD_04));
			mapAno.put(Tracking.CD_ANO, VAD_04);
			listAno.add(mapAno);
		}

		if (!Utils.isDatasetEmpty(vadZbDs) && !Utils.isDatasetEmpty(vadZoDs)) {
			Date dateZb = vadZbDs.select(col(UsageEAIC.J6_TA_EAI_CDC_VAD.DT_MAJ_PAR)).first().getDate(0);
			Date dateZo = vadZoDs.select(max(col(UsageEAIC.J6_TA_EAI_CDC_VAD.DT_MAJ_PAR))).first().getDate(0);

			if (dateZb != null) {
				if (dateZo.after(dateZb)) {
					HashMap<String, String> mapAno = new HashMap<>();
					mapAno.put(Tracking.LL_ANO, Utils.getDescAno(eaicEvtDs, VAD_05));
					mapAno.put(Tracking.CD_ANO, VAD_05);
					listAno.add(mapAno);
				}
			} else {
				HashMap<String, String> mapAno = new HashMap<>();
				mapAno.put(Tracking.LL_ANO, Utils.getDescAno(eaicEvtDs, VAD_05));
				mapAno.put(Tracking.CD_ANO, VAD_05);
				listAno.add(mapAno);
			}

			int noVerParZb = vadZbDs.withColumn("no_ver",
					when(col(UsageEAIC.J6_TA_EAI_CDC_VAD.NO_VER_PAR).isNull(), lit(-1))
							.otherwise(col(UsageEAIC.J6_TA_EAI_CDC_VAD.NO_VER_PAR))
			).select("no_ver").first().getInt(0);

			int noVerParZo = vadZoDs.select(UsageEAIC.J6_TA_EAI_CDC_VAD.NO_VER_PAR).first().getInt(0);

			if (noVerParZb < noVerParZo) {
				HashMap<String, String> mapAno = new HashMap<>();
				mapAno.put(Tracking.LL_ANO, Utils.getDescAno(eaicEvtDs, VAD_06));
				mapAno.put(Tracking.CD_ANO, VAD_06);
				listAno.add(mapAno);
			}

			if (noVerParZb == noVerParZo) {
				HashMap<String, String> mapAno = new HashMap<>();
				mapAno.put(Tracking.LL_ANO, Utils.getDescAno(eaicEvtDs, VAD_07));
				mapAno.put(Tracking.CD_ANO, VAD_07);
				listAno.add(mapAno);
			}
		}
		if (listAno.isEmpty()) {
			TrackingUtils.writeTrackInfo(vadZbDs, GeneralConstants.EVT_NUMBER.ECRITURE, UsageEAIC.CATALOG_EAIC.J6_TA_EAI_CDC_VAD_TABLE_NAME, GeneralConstants.PROCESS_NUMBER.J6_TA_EAI_CDC_VAD);
			LOGGER.info("End processData");
			return vadZbDs;
		} else {
			for (HashMap<String, String> ano : listAno) {
				Tracking.trackInfo(GeneralConstants.PROCESS_NUMBER.J6_TA_EAI_CDC_VAD, GeneralConstants.EVT_NUMBER.CONTROLE_BLOQUANT, ano);
			}
			LOGGER.info("End processData");
			return null;
		}


	}
